// Generated by CoffeeScript 1.6.2
(function() {
  var EventSpitter, exports,
    __slice = [].slice;

  EventSpitter = (function() {
    var isRegExp;

    function EventSpitter() {}

    isRegExp = function(obj) {
      return {}.toString.call(obj) === "[object RegExp]";
    };

    EventSpitter.prototype.on = function(matcher, cbk) {
      var _base, _base1, _ref, _ref1, _ref2, _ref3;

      if (isRegExp(matcher)) {
        if ((_ref = this.regexpSubscriptions) == null) {
          this.regexpSubscriptions = {};
        }
        if ((_ref1 = (_base = this.regexpSubscriptions)[matcher]) == null) {
          _base[matcher] = {
            regexp: matcher,
            callbacks: []
          };
        }
        this.regexpSubscriptions[matcher].callbacks.push(cbk);
      } else {
        if ((_ref2 = this.subscriptions) == null) {
          this.subscriptions = {};
        }
        if ((_ref3 = (_base1 = this.subscriptions)[matcher]) == null) {
          _base1[matcher] = [];
        }
        this.subscriptions[matcher].push(cbk);
      }
      return this;
    };

    EventSpitter.prototype.listeners = function(evt) {
      var callbacks, key, subscription, _ref, _ref1;

      if ((_ref = this.subscriptions) == null) {
        this.subscriptions = {};
      }
      callbacks = this.subscriptions[evt] || [];
      _ref1 = this.regexpSubscriptions;
      for (key in _ref1) {
        subscription = _ref1[key];
        if (subscription.regexp.exec(evt) != null) {
          return callbacks.concat(subscription.callbacks);
        }
      }
      return callbacks;
    };

    EventSpitter.prototype.emit = function() {
      var args, cbk, evt, _i, _len, _ref;

      evt = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.listeners(evt);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cbk = _ref[_i];
        cbk.call.apply(cbk, [this, evt].concat(__slice.call(args)));
      }
      return this;
    };

    EventSpitter.prototype.off = function(matcher, cbk) {
      var c, cbks, i, subs, _i, _len, _ref, _ref1;

      if (matcher == null) {
        this.subscriptions = {};
        this.regexpSubscriptions = {};
      } else {
        if (cbk == null) {
          if (isRegExp(matcher)) {
            if ((_ref = this.regexpSubscriptions) != null) {
              delete _ref[matcher];
            }
          } else {
            if ((_ref1 = this.subscriptions) != null) {
              delete _ref1[matcher];
            }
          }
        } else {
          cbks = [];
          if (isRegExp(matcher)) {
            subs = this.regexpSubscriptions[matcher];
            if (subs != null) {
              cbks = subs.callbacks;
            }
          } else {
            cbks = this.subscriptions[matcher] || [];
          }
          for (i = _i = 0, _len = cbks.length; _i < _len; i = ++_i) {
            c = cbks[i];
            if (c === cbk) {
              cbks.splice(i, 1);
            }
          }
        }
      }
      return this;
    };

    EventSpitter.prototype.once = function(matcher, cbk) {
      var wrappedCbk,
        _this = this;

      wrappedCbk = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        cbk.call.apply(cbk, [_this].concat(__slice.call(args)));
        return _this.off(matcher, wrappedCbk);
      };
      return this.on(matcher, wrappedCbk);
    };

    EventSpitter.prototype.addListener = EventSpitter.on;

    EventSpitter.prototype.removeListener = EventSpitter.off;

    EventSpitter.prototype.removeAllListeners = EventSpitter.off;

    return EventSpitter;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
      exports = module.exports = EventSpitter;
    }
    exports.EventSpitter = EventSpitter;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return EventSpitter;
    });
  } else {
    this.EventSpitter = EventSpitter;
  }

}).call(this);
